From 01927472f228b776b253738ea9ec9a2ea6e7cf41 Mon Sep 17 00:00:00 2001
From: Stephen Street <stephen@redrocketcomputing.com>
Date: Fri, 6 Dec 2024 16:56:18 -0800
Subject: [PATCH] Remove Hunter

Signed-off-by: Stephen Street <stephen@redrocketcomputing.com>
Signed-off-by: Joel Winarske <joel.winarsk@gmail.com>
---
 CMakeLists.txt                  | 126 +++++++++++++++-----------------
 cmake/depthaiConfig.cmake.in    |   3 -
 cmake/depthaiDependencies.cmake |  21 +-----
 examples/CMakeLists.txt         | 124 -------------------------------
 tests/CMakeLists.txt            |  91 +++--------------------
 5 files changed, 74 insertions(+), 291 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index c68a04c96..1797c87ad 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -33,12 +33,6 @@ else()
     message(STATUS "Using toolchain file: ${CMAKE_TOOLCHAIN_FILE}")
 endif()
 
-include("cmake/HunterGate.cmake")
-HunterGate(
-    URL "https://github.com/cpp-pm/hunter/archive/v0.23.322.tar.gz"
-    SHA1 "cb0ea1f74f4a2c49a807de34885743495fccccbe"
-    LOCAL # Local config for dependencies
-)
 
 # Move binary dir if windows, to shorten the path
 if(WIN32)
@@ -300,6 +294,31 @@ else()
     target_compile_features(${TARGET_CORE_NAME} INTERFACE cxx_std_14)
 endif()
 
+if(BUILD_SHARED_LIBS)
+
+    #
+    # SO Version symlinks
+    #
+    set_target_properties(${TARGET_CORE_NAME}
+            PROPERTIES
+            VERSION ${PROJECT_VERSION}
+            SOVERSION ${PROJECT_VERSION_MINOR}
+            )
+
+    #
+    # LTO
+    #
+    cmake_policy(SET CMP0069 NEW)
+    include(CheckIPOSupported)
+    check_ipo_supported(RESULT ipo_support_result OUTPUT ipo_support_output)
+    if (ipo_support_result)
+        set_property(TARGET ${TARGET_CORE_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
+    else ()
+        message(WARNING "IPO is not supported: ${ipo_support_output}")
+    endif ()
+
+endif()
+
 # First specify options
 option(DEPTHAI_BUILD_TESTS "Build tests" OFF)
 option(DEPTHAI_BUILD_EXAMPLES "Build examples - Requires OpenCV library to be installed" OFF)
@@ -326,61 +345,23 @@ endif()
 # Set constant
 set(DEPTHAI_RESOURCES_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/resources")
 
-# Include configuration
-include(Depthai/DepthaiDeviceSideConfig)    # Depthai device binary commit/version configuration
-include(Depthai/DepthaiBootloaderConfig)    # Depthai bootloader binary commit/version configuration
-
-# Include downloaders
-include(DepthaiDownloader)                  # Depthai device binary downloader
-include(DepthaiBootloaderDownloader)        # Depthai bootloader binary downloader
+#
+# Stage external download
+#
+message(STATUS "Making: ${DEPTHAI_RESOURCES_OUTPUT_DIR}")
+file(MAKE_DIRECTORY ${DEPTHAI_RESOURCES_OUTPUT_DIR})
 
+message(STATUS "Copying: ${DEPTHAI_FWP_DL_PATH}/${DEPTHAI_FWP_BOOTLOADER_FILENAME}")
+file(COPY ${DEPTHAI_FWP_DL_PATH}/${DEPTHAI_FWP_BOOTLOADER_FILENAME}
+    DESTINATION ${DEPTHAI_RESOURCES_OUTPUT_DIR})
 
-# depthai-shared enforce commit hash match if CI
-if($ENV{CI})
-    set(DEPTHAI_SHARED_COMMIT_HASH_ENFORCE ON)
-    set(DEPTHAI_BOOTLOADER_SHARED_COMMIT_HASH_ENFORCE ON)
-endif()
+    message(STATUS "Copying: ${DEPTHAI_FWP_DL_PATH}/${DEPTHAI_FWP_DEVICE_SIDE_FILENAME}")
+file(COPY ${DEPTHAI_FWP_DL_PATH}/${DEPTHAI_FWP_DEVICE_SIDE_FILENAME}
+    DESTINATION ${DEPTHAI_RESOURCES_OUTPUT_DIR})
 
 
-# Then get the Depthai device side binaries (local or download)
-if(DEPTHAI_CMD_PATH OR DEPTHAI_USB2_CMD_PATH OR DEPTHAI_USB2_PATCH_PATH)
-    # At least one of the paths is set. include binaries locally
-    message(STATUS "Using local Depthai device side binaries...")
-
-    DepthaiLocal(
-        PATCH_ONLY ${DEPTHAI_USB2_PATCH_ONLY_MODE}
-        "${DEPTHAI_RESOURCES_OUTPUT_DIR}"            # Output folder
-        DEPTHAI_RESOURCE_LIST                       # List of output resources
-        "${DEPTHAI_CMD_PATH}"                       # depthai.cmd
-        "${DEPTHAI_USB2_CMD_PATH}"                  # depthai-usb2.cmd
-        "${DEPTHAI_USB2_PATCH_PATH}"                # depthai-usb2-patch.patch
-    )
-
-else()
-    # No user specified paths, download from server
-    message(STATUS "Downloading Depthai device side binaries from server...")
-
-    DepthaiDownload(
-        "${DEPTHAI_SHARED_COMMIT_HASH}" "${DEPTHAI_SHARED_COMMIT_HASH_ENFORCE}"
-        PATCH_ONLY ${DEPTHAI_USB2_PATCH_ONLY_MODE}
-        "${DEPTHAI_RESOURCES_OUTPUT_DIR}"            # Output folder
-        DEPTHAI_RESOURCE_LIST                       # List of output resources
-        "${DEPTHAI_DEVICE_SIDE_MATURITY}"           # Maturity
-        "${DEPTHAI_DEVICE_SIDE_COMMIT}"             # commit hash
-        "${DEPTHAI_DEVICE_SIDE_VERSION}"            # Optional version
-    )
-endif()
-list(APPEND RESOURCE_COMPILED_FILES ${DEPTHAI_RESOURCE_LIST})
-
-# Add bootloader
-DepthaiBootloaderDownload(
-    "${DEPTHAI_BOOTLOADER_SHARED_COMMIT_HASH}" "${DEPTHAI_BOOTLOADER_SHARED_COMMIT_HASH_ENFORCE}"
-    "${DEPTHAI_RESOURCES_OUTPUT_DIR}"                # Output folder
-    DEPTHAI_BOOTLOADER_RESOURCE_LIST                # List of output resources
-    "${DEPTHAI_BOOTLOADER_MATURITY}"                # Maturity
-    "${DEPTHAI_BOOTLOADER_VERSION}"                 # if maturity == snapshot -> hash else version
-)
-list(APPEND RESOURCE_COMPILED_FILES ${DEPTHAI_BOOTLOADER_RESOURCE_LIST})
+list(APPEND RESOURCE_COMPILED_FILES ${DEPTHAI_RESOURCES_OUTPUT_DIR}/${DEPTHAI_FWP_BOOTLOADER_FILENAME})
+list(APPEND RESOURCE_COMPILED_FILES ${DEPTHAI_RESOURCES_OUTPUT_DIR}/${DEPTHAI_FWP_DEVICE_SIDE_FILENAME})
 
 message(STATUS "LIST OF RESOURCE COMPILED FILES: ${RESOURCE_COMPILED_FILES}")
 
@@ -451,15 +432,14 @@ target_link_libraries(${TARGET_CORE_NAME}
     PRIVATE
         XLink
         Threads::Threads
-        BZip2::bz2
+        bz2
         FP16::fp16
         archive_static
         spdlog::spdlog
-        ZLIB::zlib
+        z
 )
 
 # Add compile & CMake definitions
-set(DEPTHAI_DEVICE_VERSION "${DEPTHAI_DEVICE_SIDE_COMMIT}")
 target_compile_definitions(${TARGET_CORE_NAME}
     PRIVATE
         # Add depthai-device version
@@ -555,6 +535,26 @@ if(DEPTHAI_OPENCV_SUPPORT)
             target_clangformat_setup(${TARGET_OPENCV_NAME} "")
         endif()
 
+        if(BUILD_SHARED_LIBS)
+
+            #
+            # SO Version symlinks
+            #
+            set_target_properties(${TARGET_OPENCV_NAME}
+                    PROPERTIES
+                    VERSION ${PROJECT_VERSION}
+                    SOVERSION ${PROJECT_VERSION_MINOR}
+                    )
+        
+            #
+            # LTO
+            #
+            if (ipo_support_result)
+                set_property(TARGET ${TARGET_OPENCV_NAME} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
+            endif ()
+
+        endif()
+
         # Add to list of targets to export and install
         list(APPEND targets_to_export ${TARGET_OPENCV_NAME})
 
@@ -714,19 +714,15 @@ configure_file("cmake/${PROJECT_NAME}Dependencies.cmake" ${PROJECT_NAME}Dependen
 write_basic_package_version_file(${PROJECT_NAME}ConfigVersion.cmake VERSION ${PROJECT_VERSION} COMPATIBILITY AnyNewerVersion)
 
 # Configure config file (one for exporting build directory, one for installation)
-file(RELATIVE_PATH DEPTHAI_DEPENDENCIES_INSTALLATION_PATH_REL "${CMAKE_CURRENT_BINARY_DIR}" "${HUNTER_INSTALL_PREFIX}")
 configure_file(cmake/${PROJECT_NAME}Config.cmake.in ${PROJECT_NAME}Config.cmake @ONLY)
 
 # Config for installation
-set(DEPTHAI_DEPENDENCIES_INSTALLATION_PATH_REL "./dependencies")
 configure_file(cmake/${PROJECT_NAME}Config.cmake.in _install/${PROJECT_NAME}Config.cmake @ONLY)
 
 # Modify RPath to point to the cmake/depthai/dependencies/lib
 # note: macOS is APPLE and also UNIX!
 if(APPLE)
   set_target_properties(${TARGET_CORE_NAME} PROPERTIES INSTALL_RPATH "@loader_path;@loader_path/cmake/${PROJECT_NAME}/dependencies/lib")
-elseif(UNIX)
-  set_target_properties(${TARGET_CORE_NAME} PROPERTIES INSTALL_RPATH "$ORIGIN:$ORIGIN/cmake/${PROJECT_NAME}/dependencies/lib")
 endif()
 
 # Export to CMake registry if specified
@@ -753,8 +749,6 @@ if(DEPTHAI_INSTALL)
     install(DIRECTORY "${DEPTHAI_SHARED_3RDPARTY_INCLUDE}/" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/${DEPTHAI_SHARED_3RDPARTY_HEADERS_PATH}")
     # Install depthai-bootloader-shared public headers
     install(DIRECTORY "${DEPTHAI_BOOTLOADER_SHARED_PUBLIC_INCLUDE}/" DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}")
-    # Install Hunter dependencies
-    install(DIRECTORY "${HUNTER_INSTALL_PREFIX}/" DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}/dependencies")
     # Install resources if not RC'd
     if(NOT DEPTHAI_BINARIES_RESOURCE_COMPILE)
         install(DIRECTORY "${DEPTHAI_RESOURCES_OUTPUT_DIR}/" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}")
diff --git a/cmake/depthaiConfig.cmake.in b/cmake/depthaiConfig.cmake.in
index 98309545b..bcae1a18c 100644
--- a/cmake/depthaiConfig.cmake.in
+++ b/cmake/depthaiConfig.cmake.in
@@ -7,9 +7,6 @@ set(DEPTHAI_ENABLE_BACKWARD @DEPTHAI_ENABLE_BACKWARD@)
 # Specify that this is config mode (Called by find_package)
 set(CONFIG_MODE TRUE)
 
-# Compute the installation prefix relative to this file.
-set(_IMPORT_PREFIX "@DEPTHAI_DEPENDENCIES_INSTALLATION_PATH_REL@")
-
 # Add dependencies file
 include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Dependencies.cmake")
 
diff --git a/cmake/depthaiDependencies.cmake b/cmake/depthaiDependencies.cmake
index 9be00b7f6..59ba9a267 100644
--- a/cmake/depthaiDependencies.cmake
+++ b/cmake/depthaiDependencies.cmake
@@ -9,38 +9,21 @@ if(CONFIG_MODE)
     set(_QUIET "QUIET")
 else()
     set(DEPTHAI_SHARED_LIBS ${BUILD_SHARED_LIBS})
-    hunter_add_package(nlohmann_json)
-    if(NOT DEPTHAI_XLINK_LOCAL)
-        hunter_add_package(XLink)
-    endif()
-    hunter_add_package(BZip2)
-    hunter_add_package(FP16)
-    hunter_add_package(libarchive-luxonis)
-    hunter_add_package(spdlog)
-    hunter_add_package(ZLIB)
-    if(DEPTHAI_ENABLE_BACKWARD)
-        hunter_add_package(Backward)
-    endif()
-    hunter_add_package(libnop)
-    if(DEPTHAI_PCL_SUPPORT)
-        hunter_add_package(jsoncpp)
-    endif()
 endif()
 
 # If library was build as static, find all dependencies
 if(NOT CONFIG_MODE OR (CONFIG_MODE AND NOT DEPTHAI_SHARED_LIBS))
 
     # BZip2 (for bspatch)
-    find_package(BZip2 ${_QUIET} CONFIG REQUIRED)
+    find_package(BZip2 ${_QUIET} REQUIRED)
 
     # FP16 for conversions
     find_package(FP16 ${_QUIET} CONFIG REQUIRED)
 
     # libarchive for firmware packages
     find_package(archive_static ${_QUIET} CONFIG REQUIRED)
-    find_package(lzma ${_QUIET} CONFIG REQUIRED)
     # ZLIB for compressing Apps
-    find_package(ZLIB CONFIG REQUIRED)
+    find_package(ZLIB REQUIRED)
 
     # spdlog for library and device logging
     find_package(spdlog ${_QUIET} CONFIG REQUIRED)
diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index f3c0762b8..9b2e31b73 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -96,130 +96,6 @@ endfunction()
 
 # Create a custom target which runs all examples for 10 seconds max, and check if they executed without errors
 
-
-
-# Add any custom binary data using the following snippet
-## # Hunter test data download
-## hunter_private_data(
-##     URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/mobilenet.blob"
-##     SHA1 "e89d3ee9f26d80397e44f89c6b375990064a4a42"
-##     FILE "mobilenet.blob"
-##     LOCATION mobilenet_blob
-## )
-
-
-# Hunter test data download
-
-# NeuralNetwork node, mobilenet example
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/mobilenet-ssd_openvino_2021.4_6shave.blob"
-    SHA1 "4f4506726e3083981064938a0faaf9af6180d2c6"
-    FILE "mobilenet-ssd_openvino_2021.4_6shave.blob"
-    LOCATION mobilenet_blob
-)
-
-# YoloV3 resource
-hunter_private_data(
-    URL "http://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/yolo-v3-tiny-tf_openvino_2021.4_6shave.blob"
-    SHA1 "dedb2d4d96b23e42d15c15e454b8f02eca2713de"
-    FILE "yolo-v3-tiny-tf_openvino_2021.4_6shave.blob"
-    LOCATION tiny_yolo_v3_blob
-)
-
-# YoloV4 resource
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/yolo-v4-tiny-tf_openvino_2021.4_6shave.blob"
-    SHA1 "d8d09b697dac298fe83cf8856740a21b1a61ab89"
-    FILE "yolo-v4-tiny-tf_openvino_2021.4_6shave.blob"
-    LOCATION tiny_yolo_v4_blob
-)
-
-# NeuralNetwork node, mobilenet example, 5 shaves
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/mobilenet-ssd_openvino_2021.4_5shave.blob"
-    SHA1 "14ab3ef446b8a649d6694d94c2fc8b798efd74a3"
-    FILE "mobilenet-ssd_openvino_2021.4_5shave.blob"
-    LOCATION mobilenet_5shaves_blob
-)
-
-# NeuralNetwork node, mobilenet example, 8 shaves
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/mobilenet-ssd_openvino_2021.4_8shave.blob"
-    SHA1 "7e7ea9a680668f3ca9e8f1d22cc8f3f1a02ac018"
-    FILE "mobilenet-ssd_openvino_2021.4_8shave.blob"
-    LOCATION mobilenet_8shaves_blob
-)
-
-# Video file with objects to detect
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/construction_vest.mp4"
-    SHA1 "271d8d0b702e683ce02957db7c100843de5ceaec"
-    FILE "construction_vest.mp4"
-    LOCATION construction_vest
-)
-
-# Calibration Sample files
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/misc/depthai_calib.json"
-    SHA1 "ec50a47496473116c51cec1c8249bff2679383c3"
-    FILE "depthai_calib.json"
-    LOCATION calib_v6
-)
-
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/misc/depthai_v5.calib"
-    SHA1 "adfe9976b9aacfdaa76ac7138810999988177e71"
-    FILE "depthai_v5.calib"
-    LOCATION calib_v5
-)
-
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/misc/BW1098OBC.json"
-    SHA1 "1e84b6c339ac51e3b254775090b91235a40fac71"
-    FILE "BW1098OBC.json"
-    LOCATION device_config
-)
-
-# person-detection
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/person-detection-retail-0013_openvino_2021.4_7shave.blob"
-    SHA1 "946d102874b287292cdb5952fa66356c8d36025f"
-    FILE "person-detection-retail-0013_openvino_2021.4_7shave.blob"
-    LOCATION person_detection
-)
-
-# concat model
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/concat_openvino_2021.4_6shave.blob"
-    SHA1 "e4af6fb2bed39648a2a4424d8bdc5bac56d616df"
-    FILE "concat_openvino_2021.4_6shave.blob"
-    LOCATION concat_model
-)
-
-# blur model
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/blur_simplified_openvino_2021.4_6shave.blob"
-    SHA1 "14d543bbaceffa438071f83be58ad22a07ce33ee"
-    FILE "blur_simplified_openvino_2021.4_6shave.blob"
-    LOCATION blur_model
-)
-
-# diff model
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/diff_openvino_2022.1_6shave.blob"
-    SHA1 "fe9600e617d222f986a699f18e77e80ce2485000"
-    FILE "diff_openvino_2022.1_6shave.blob"
-    LOCATION diff_model
-)
-
-# normalization model
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/normalize_openvino_2021.4_4shave.blob"
-    SHA1 "1435f6d11e0dfdbc60f2dfa45aecd3d530b6153b"
-    FILE "normalize_openvino_2021.4_4shave.blob"
-    LOCATION normalization_model
-)
-
 ## message(STATUS "Location of test1.data: ${test1_data}")
 
 # bootloader
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 89fe6f3fc..b1aa1207b 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -3,7 +3,6 @@ include(CTest)
 enable_testing()
 
 # Add catch2 for writing tests
-hunter_add_package(Catch2)
 find_package(Catch2 CONFIG REQUIRED)
 
 # Create environments for usb & poe labels
@@ -127,72 +126,6 @@ function(dai_test_compile_definitions)
     endif()
 endfunction()
 
-# Mobilenet network
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/mobilenet-ssd_openvino_2021.2_8shave.blob"
-    SHA1 "3329bb8f3a9c881ef9756d232055f9d6f38aa07b"
-    FILE "mobilenet-ssd_openvino_2021.2_8shave.blob"
-    LOCATION mobilenet_blob
-)
-
-# OpenVINO 2020.3 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2020.3_4shave.blob"
-    SHA1 "f0134c9b843fe414f6d98b17a70f069d1ab0f3d8"
-    FILE "text-image-super-resolution-0001_2020.3_4shave.blob"
-    LOCATION openvino_2020_3_blob
-)
-# OpenVINO 2020.4 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2020.4_4shave.blob"
-    SHA1 "25dcf0b146da8c85c9c4cba00ad5fdd4ed02a1b6"
-    FILE "text-image-super-resolution-0001_2020.4_4shave.blob"
-    LOCATION openvino_2020_4_blob
-)
-
-# OpenVINO 2021.1 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2021.1_4shave.blob"
-    SHA1 "39c4f47f2a75627b7561e97dd7cdfcd0b1925a1e"
-    FILE "text-image-super-resolution-0001_2021.1_4shave.blob"
-    LOCATION openvino_2021_1_blob
-)
-# OpenVINO 2021.2 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2021.2_4shave.blob"
-    SHA1 "a204467f86aa4ad63d31782ada271bea6f57f789"
-    FILE "text-image-super-resolution-0001_2021.2_4shave.blob"
-    LOCATION openvino_2021_2_blob
-)
-# OpenVINO 2021.3 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2021.3_4shave.blob"
-    SHA1 "af19470feb59317e74d045bc31d93ca129c46674"
-    FILE "text-image-super-resolution-0001_2021.3_4shave.blob"
-    LOCATION openvino_2021_3_blob
-)
-# OpenVINO 2021.4.2 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2021.4.2_4shave.blob"
-    SHA1 "164b6b2ae48d38bc4f07cc8296b8bcb7644a1578"
-    FILE "text-image-super-resolution-0001_2021.4.2_4shave.blob"
-    LOCATION openvino_2021_4_2_blob
-)
-# OpenVINO 2022.1.0 blob
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/text-image-super-resolution-0001_2022.1.0_4shave.blob"
-    SHA1 "98e94b865b9c48a92eaebd1ddc883712dfe7cfcb"
-    FILE "text-image-super-resolution-0001_2022.1.0_4shave.blob"
-    LOCATION openvino_2022_1_blob
-)
-# YoloV4 resource
-hunter_private_data(
-    URL "https://artifacts.luxonis.com/artifactory/luxonis-depthai-data-local/network/yolo-v4-tiny-tf_openvino_2021.4_4shave.blob"
-    SHA1 "7da2f96f7300e3828940557e6a86ac6f243eef7e"
-    FILE "yolo-v4-tiny-tf_openvino_2021.4_4shave.blob"
-    LOCATION tiny_yolo_v4_2021-4_4shave_blob
-)
-
 
 # Add tests
 dai_add_test(color_camera_node_test src/color_camera_node_test.cpp)
@@ -201,17 +134,17 @@ dai_add_test(pipeline_test src/pipeline_test.cpp)
 dai_add_test(logging_test src/logging_test.cpp)
 
 dai_add_test(neural_network_test src/neural_network_test.cpp)
-dai_test_compile_definitions(neural_network_test PRIVATE BLOB_PATH="${mobilenet_blob}")
+dai_test_compile_definitions(neural_network_test PRIVATE BLOB_PATH="${test_mobilenet_blob}")
 
 dai_add_test(openvino_blob_test src/openvino_blob_test.cpp)
 dai_test_compile_definitions(openvino_blob_test PRIVATE
-    OPENVINO_2020_3_BLOB_PATH="${openvino_2020_3_blob}"
-    OPENVINO_2020_4_BLOB_PATH="${openvino_2020_4_blob}"
-    OPENVINO_2021_1_BLOB_PATH="${openvino_2021_1_blob}"
-    OPENVINO_2021_2_BLOB_PATH="${openvino_2021_2_blob}"
-    OPENVINO_2021_3_BLOB_PATH="${openvino_2021_3_blob}"
-    OPENVINO_2021_4_BLOB_PATH="${openvino_2021_4_2_blob}"
-    OPENVINO_2022_1_BLOB_PATH="${openvino_2022_1_blob}"
+    OPENVINO_2020_3_BLOB_PATH="${test_openvino_2020_3_blob}"
+    OPENVINO_2020_4_BLOB_PATH="${test_openvino_2020_4_blob}"
+    OPENVINO_2021_1_BLOB_PATH="${test_openvino_2021_1_blob}"
+    OPENVINO_2021_2_BLOB_PATH="${test_openvino_2021_2_blob}"
+    OPENVINO_2021_3_BLOB_PATH="${test_openvino_2021_3_blob}"
+    OPENVINO_2021_4_BLOB_PATH="${test_openvino_2021_4_2_blob}"
+    OPENVINO_2022_1_BLOB_PATH="${test_openvino_2022_1_blob}"
 )
 
 # Bootloader configuration tests
@@ -242,11 +175,11 @@ dai_add_test(multiple_devices_test src/multiple_devices_test.cpp)
 
 # Filesystem test
 dai_add_test(filesystem_test src/filesystem_test.cpp)
-dai_test_compile_definitions(filesystem_test PRIVATE BLOB_PATH="${mobilenet_blob}")
+dai_test_compile_definitions(filesystem_test PRIVATE BLOB_PATH="${test_mobilenet_blob}")
 dai_add_test(filesystem_test_17 src/filesystem_test.cpp CXX_STANDARD 17)
-dai_test_compile_definitions(filesystem_test_17 PRIVATE BLOB_PATH="${mobilenet_blob}")
+dai_test_compile_definitions(filesystem_test_17 PRIVATE BLOB_PATH="${test_mobilenet_blob}")
 dai_add_test(filesystem_test_20 src/filesystem_test.cpp CXX_STANDARD 20)
-dai_test_compile_definitions(filesystem_test_20 PRIVATE BLOB_PATH="${mobilenet_blob}")
+dai_test_compile_definitions(filesystem_test_20 PRIVATE BLOB_PATH="${test_mobilenet_blob}")
 
 # Bootloader version tests
 dai_add_test(bootloader_version_test src/bootloader_version_test.cpp)
@@ -274,7 +207,7 @@ if(DEPTHAI_STABILITY_TEST_DEBUG)
 else()
     target_link_libraries(stability_stress_test PRIVATE depthai::core Threads::Threads)
 endif()
-target_compile_definitions(stability_stress_test PRIVATE BLOB_PATH="${tiny_yolo_v4_2021-4_4shave_blob}")
+target_compile_definitions(stability_stress_test PRIVATE BLOB_PATH="${test_tiny_yolo_v4_2021-4_4shave_blob}")
 # add_test(stability_stress_test stability_stress_test)
 # add_test(stability_stress_test_poe stability_stress_test)
 # set_tests_properties(stability_stress_test PROPERTIES ENVIRONMENT "UBSAN_OPTIONS=halt_on_error=1;DEPTHAI_PROTOCOL=usb" LABELS stability_usb)
